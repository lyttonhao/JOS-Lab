/* See COPYRIGHT for copyright information. */

#include <inc/mmu.h>
#include <inc/memlayout.h>
#include <inc/trap.h>

#include <kern/picirq.h>


###################################################################
# exceptions/interrupts
###################################################################

/* TRAPHANDLER defines a globally-visible function for handling a trap.
 * It pushes a trap number onto the stack, then jumps to _alltraps.
 * Use TRAPHANDLER for traps where the CPU automatically pushes an error code.
 *
 * You shouldn't call a TRAPHANDLER function from C, but you may
 * need to _declare_ one in C (for instance, to get a function pointer
 * during IDT setup).  You can declare the function with
 *   void NAME();
 * where NAME is the argument passed to TRAPHANDLER.
 */
#define TRAPHANDLER(name, num)						\
	.globl name;		/* define global symbol for 'name' */	\
	.type name, @function;	/* symbol type is function */		\
	.align 2;		/* align function definition */		\
	name:			/* function starts here */		\
	pushl $(num);							\
	jmp _alltraps

/* Use TRAPHANDLER_NOEC for traps where the CPU doesn't push an error code.
 * It pushes a 0 in place of the error code, so the trap frame has the same
 * format in either case.
 */
#define TRAPHANDLER_NOEC(name, num)					\
	.globl name;							\
	.type name, @function;						\
	.align 2;							\
	name:								\
	pushl $0;							\
	pushl $(num);							\
	jmp _alltraps

#define myhdler(name, num)	\
	.text;				\
	.globl name;		/* define global symbol for 'name' */	\
	.type name, @function;	/* symbol type is function */		\
	.align 2;		/* align function definition */		\
	name:			/* function starts here */		\
	pushl $(num);							\
	jmp _alltraps;							\
	.data;                                                     \
	.long name


#define myhdler_noec(name, num)					\
	.text;							\
	.globl name;							\
	.type name, @function;						\
	.align 2;							\
	name:								\
	pushl $0;							\
	pushl $(num);							\
	jmp _alltraps;						\
	.data;                                                \
	.long name

.data
	.global func_entry
	.align 2
func_entry: 

.text

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */
/*	TRAPHANDLER_NOEC(divide_entry, T_DIVIDE)
	TRAPHANDLER_NOEC(debug_entry, T_DEBUG)
	TRAPHANDLER_NOEC(nmi_entry, T_NMI)
	TRAPHANDLER_NOEC(brkpt_entry, T_BRKPT)
	TRAPHANDLER_NOEC(oflow_entry, T_OFLOW)
	TRAPHANDLER_NOEC(bound_entry, T_BOUND)
	TRAPHANDLER_NOEC(illop_entry, T_ILLOP)
	TRAPHANDLER_NOEC(device_entry, T_DEVICE)
	TRAPHANDLER(dblflt_entry, T_DBLFLT)
	TRAPHANDLER(tss_entry, T_TSS)
	TRAPHANDLER(segnp_entry, T_SEGNP)
	TRAPHANDLER(stack_entry, T_STACK)
	TRAPHANDLER(gpflt_entry, T_GPFLT)
	TRAPHANDLER(pgflt_entry, T_PGFLT)
	TRAPHANDLER_NOEC(fperr_entry, T_FPERR)
	TRAPHANDLER(align_entry, T_ALIGN)
	TRAPHANDLER_NOEC(mchk_entry, T_MCHK)
	TRAPHANDLER_NOEC(simderr_entry, T_SIMDERR)

	TRAPHANDLER_NOEC(syscall_entry, T_SYSCALL)
*/
	myhdler_noec(divide_entry, T_DIVIDE)
	myhdler_noec(debug_entry, T_DEBUG)
	myhdler_noec(nmi_entry, T_NMI)
	myhdler_noec(brkpt_entry, T_BRKPT)
	myhdler_noec(oflow_entry, T_OFLOW)
	myhdler_noec(bound_entry, T_BOUND)
	myhdler_noec(illop_entry, T_ILLOP)
	myhdler_noec(device_entry, T_DEVICE)
	myhdler(dblflt_entry, T_DBLFLT)
	myhdler(emtpy_Coproc, 9)
	myhdler(tss_entry, T_TSS)
	myhdler(segnp_entry, T_SEGNP)
	myhdler(stack_entry, T_STACK)
	myhdler(gpflt_entry, T_GPFLT)
	myhdler(pgflt_entry, T_PGFLT)
	myhdler(empty_res, 15)
	myhdler_noec(fperr_entry, T_FPERR)
	myhdler(align_entry, T_ALIGN)
	myhdler_noec(mchk_entry, T_MCHK)
	myhdler_noec(simderr_entry, T_SIMDERR)

	TRAPHANDLER_NOEC(syscall_entry, T_SYSCALL)

	TRAP

/*
 * Lab 3: Your code here for _alltraps
 */
_alltraps:
	pushw $0
	pushw %ds
	pushw $0
	pushw %es
	pushal

	movl $GD_KD, %eax #--#
	movw %ax, %ds
	movw %ax, %es

	pushl %esp

	call trap

